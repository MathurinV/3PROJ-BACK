networks:
  default:
  local:
    internal: true

services:
  api:
    image: api
    build:
      context: .
      dockerfile: API/Dockerfile
    container_name: "api"
    environment:
      # DATABASE
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_PORT: ${DB_PORT}

      # API
      API_ENDPOINT: ${API_ENDPOINT}
      API_PORT: ${API_PORT}

      # GOOGLE_AUTHENTICATION
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # FTP
      PASV_ADDRESS: ${PASV_ADDRESS}
      # JUSTIFICATIONS
      FTP_JUSTIFICATIONS_USER: ${FTP_JUSTIFICATIONS_USER}
      FTP_JUSTIFICATIONS_PASS: ${FTP_JUSTIFICATIONS_PASS}
      # AVATARS
      FTP_AVATARS_USER: ${FTP_AVATARS_USER}
      FTP_AVATARS_PASS: ${FTP_AVATARS_PASS}
      # RIBS
      FTP_USER_RIBS_USER: ${FTP_USER_RIBS_USER}
      FTP_USER_RIBS_PASS: ${FTP_USER_RIBS_PASS}
      # GROUPS_IMAGES
      FTP_GROUPS_USER: ${FTP_GROUPS_USER}
      FTP_GROUPS_PASS: ${FTP_GROUPS_PASS}

      # CLIENT
      CLIENT_URL: ${CLIENT_URL}

    networks:
      - default
      - local
    ports:
      - "${API_PORT}:8080"
    depends_on:
      - db
      - cache
      - ftp
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  db:
    image: docker.io/library/postgres:alpine
    container_name: "db"
    volumes:
      - dbdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - local
      - default
    #      dev only:
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  cache:
    image: docker.io/library/redis:alpine
    container_name: "cache"
    networks:
      - local
    #    ports:
    #      - "${CACHE_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  ftp:
    image: docker.io/delfer/alpine-ftp-server
    container_name: "ftp"
    ports:
      - "21:21"
      - "21000-21010:21000-21010"
    environment:
      USERS: "${FTP_JUSTIFICATIONS_USER}|${FTP_JUSTIFICATIONS_PASS}|${FTP_JUSTIFICATIONS_PATH} ${FTP_AVATARS_USER}|${FTP_AVATARS_PASS}|${FTP_AVATARS_PATH} ${FTP_USER_RIBS_USER}|FTP_USER_RIBS_PASS|${FTP_USER_RIBS_PATH} ${FTP_GROUPS_USER}|${FTP_GROUPS_PASS}|${FTP_GROUPS_PATH}"
      ADDRESS: ${PASV_ADDRESS}
    volumes:
      - ./ftp_data:/home/vsftpd
    networks:
      - local
    restart: always
  
  # nginx:
  #   image: nginx:alpine
  #   container_name: "nginx"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./certs:/etc/nginx/certs
  #   networks:
  #     - default
  #   ports:
  #     - "443:443"
  #   depends_on:
  #     - api

volumes:
  dbdata: